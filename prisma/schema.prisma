// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  events        Event[]   @relation("UserEvents")
  whatsapp      String?
  phone         String?
  establishment String?
  address       String?
  instagram     String?
  facebook      String?
  openingHours  String?
  subscription  Subscription?
  applications  Application[] @relation("UserApplications")
  reviews       Review[]      @relation("UserReviews")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Event {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  date            DateTime
  location        String
  maxParticipants Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  organizerId     String    @db.ObjectId
  organizer       User      @relation("UserEvents", fields: [organizerId], references: [id])
  applications    Application[] @relation("EventApplications")
  reviews         Review[]      @relation("EventReviews")
}

model Application {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  presencaVipId String    @db.ObjectId
  eventId       String    @db.ObjectId
  status        String    @default("pending") // pending, approved, rejected
  presencaVip   User      @relation("UserApplications", fields: [presencaVipId], references: [id])
  event         Event     @relation("EventApplications", fields: [eventId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([presencaVipId, eventId])
}

model Subscription {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  userId              String   @unique @db.ObjectId
  user                User     @relation(fields: [userId], references: [id])
  plan                String
  status              String
  startDate           DateTime
  endDate             DateTime
  maxEvents           Int
  maxPresencasPerEvent Int
  maxFlyersPerMonth   Int
  analytics           Boolean
  prioritySupport     Boolean
  customBranding      Boolean
  profileAccess       Boolean
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Review {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  eventId     String   @db.ObjectId
  userId      String   @db.ObjectId
  rating      Int
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  event       Event    @relation("EventReviews", fields: [eventId], references: [id])
  user        User     @relation("UserReviews", fields: [userId], references: [id])
}
